package com.lms.model.persistence;

import com.lms.bean.Book;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

@Repository
public class BookLMSImpl implements BookLMSDAO {
	
	@Autowired
	private JdbcTemplate jdbcTemplate;
	
    String pass = "wiley";

    @Override
    public boolean addBook(Book book) {
        int rows = 0;
            int f = 0;
            int rand = 0;
            while (f == 0) {
                int max = 10000;
                int min = 20000;
                int range = max - min + 1;
                rand = (int) (Math.random() * range) + min; 
        
        String query = "INSERT INTO BOOK values(?,?,?,?,?,?,?)";

		rows = jdbcTemplate.update(query,rand, book.getBookName(), book.getIsbnNumber(),
				book.getAuthorName(), book.getPublisherName(), book.getBookType(), book.getBookNumber());

		
        return rows > 0;
    }

    @Override
    public int removeBook(String bookName) {
        int rows = 0;
        try (Connection connection = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/lms", "root", pass);
             PreparedStatement preparedStatement = connection
                     .prepareStatement("DELETE FROM book WHERE bookName=?")) {

            preparedStatement.setString(1, bookName);

            rows = preparedStatement.executeUpdate();
        } catch (SQLException e) {
            System.out.println(e.getLocalizedMessage());
        }
        return rows;
    }

    @Override
    public Book searchBook(String name) {
        Book book = null;
        try (Connection connection = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/lms", "root", pass);
             PreparedStatement preparedStatement = connection
                     .prepareStatement("SELECT * FROM book  WHERE bookName=?");) {


            preparedStatement.setString(1, name);
            ResultSet resultSet = preparedStatement.executeQuery();

            if (resultSet.next()) {
            	int id=resultSet.getInt("bookId");
                String bookName = resultSet.getString("bookName");
                int isbnNumber = resultSet.getInt("ISBNNumber");
                String authorName = resultSet.getString("bookAuthor");
                String publisherName = resultSet.getString("bookAuthor");
                String bookType = resultSet.getString("bookType");
                int bookNumber = resultSet.getInt("noOfBooks");

                book = new Book(id,bookName, isbnNumber, authorName, publisherName, bookType, bookNumber);
            }

        } catch (SQLException e) {
            System.out.println(e.getLocalizedMessage());
        }
        return book;
    }

    @Override
    public boolean issueBook(int employeeId, int bookId, String issueDate, String ScheduledDate) {
        int rows = 0, rows1 = 0, row2 = 0;
        try (Connection connection = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/lms", "root", pass);
             PreparedStatement preparedStatement1 = connection
                     .prepareStatement("{call insertIntoTransactions(?,?)}");
             PreparedStatement preparedStatement2 = connection
                     .prepareStatement("update employee set booksIssued = booksIssued+1 where employeeId =?;");
             PreparedStatement preparedStatement = connection
                     .prepareStatement("{call insertIntoTBR(?,?,?,?)}");) {
//			PreparedStatement preparedStatement2 = connection
//                    .prepareStatement("select transactionid from ");

            int f = 0;
            int rand = 0;
            while (f == 0) {
                int max = 10000;
                int min = 20000;
                int range = max - min + 1;
                rand = (int) (Math.random() * range) + min;
//                 preparedStatement1.setInt(1,rand);
//                 ResultSet resultSet1 = preparedStatement1.executeQuery();
//                 if(!resultSet1.next()) {
//                	 f=1;
//                 }
                f = 1;
            }
            preparedStatement1.setInt(1, rand);
            preparedStatement1.setInt(2, employeeId);
            rows1 = preparedStatement1.executeUpdate();

            preparedStatement2.setInt(1, employeeId);
            row2 = preparedStatement2.executeUpdate();

            preparedStatement.setString(3, issueDate);
            preparedStatement.setInt(1, bookId);
            preparedStatement.setString(4, ScheduledDate);
            preparedStatement.setInt(2, rand);

            rows = preparedStatement.executeUpdate();

            System.out.println(rows);
        } catch (SQLException e) {
            System.out.println(e.getLocalizedMessage());
        }
        return rows > 0 && rows1 > 0 && row2 > 0;
    }

    @Override
    public List<Book> getAllBooks() {
        List<Book> bookList = new ArrayList<>();
        try (Connection connection = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/lms",
                "root", pass);

             PreparedStatement preparedStatement = connection
                     .prepareStatement("SELECT * FROM book");) {

            ResultSet resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                int id = resultSet.getInt("bookId");
                String bookName = resultSet.getString("bookName");
                int isbnNumber = resultSet.getInt("ISBNNumber");
                String authorName = resultSet.getString("bookAuthor");
                String publisherName = resultSet.getString("bookAuthor");
                String bookType = resultSet.getString("bookType");
                int bookNumber = resultSet.getInt("noOfBooks");
                bookList.add(new Book(id,bookName, isbnNumber, authorName, publisherName, bookType, bookNumber));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return bookList;
    }

    @Override
    public String checkReturnDate(int empID, int bookId) {
        StringBuilder sb = new StringBuilder();

        try (Connection connection = DriverManager.getConnection
                ("jdbc:mysql://127.0.0.1:3306/lms", "root", pass);
             PreparedStatement preparedStatement = connection
                     .prepareStatement(
                             "SELECT returnDate FROM employee INNER JOIN transations using(employeeID) " +
                                     "INNER JOIN tbr using(transationId) " +
                                     "WHERE bookId = ? AND employeeID = ?")) {
            preparedStatement.setInt(1, bookId);
            preparedStatement.setInt(2, empID);
            ResultSet resultSet = preparedStatement.executeQuery();

            if (resultSet.next()) {
                java.sql.Date date = resultSet.getDate("returnDate");
                sb.append("EmpID: ").append(empID).append("| ");
                sb.append("Book ID: ").append(bookId).append("| ");
                sb.append("Return Date: ").append(date.toString()).append("\n");

            }
        } catch (SQLException e) {
            System.out.println(e.getLocalizedMessage());
        }
        return sb.toString();
    }

    @Override
    public boolean returnBook(int transactionID) {
        int r1 = 0;
        int rs1 = 0;
        boolean r2 = false;
        try (Connection connection = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/lms", "root", pass)) {
            PreparedStatement preparedStatement = connection
                    .prepareStatement("UPDATE tbr SET returnDate = NOW() WHERE transationID = ?");
            preparedStatement.setInt(1, transactionID);
            PreparedStatement ps1 = connection
                    .prepareStatement("UPDATE employee SET booksIssued = booksIssued - 1 WHERE employeeId = " +
                            "(SELECT employeeID FROM transations WHERE transationID = ?)");
            ps1.setInt(1, transactionID);
            rs1 = ps1.executeUpdate();
            r1 = preparedStatement.executeUpdate();

//            PreparedStatement preparedStatement2 = connection.prepareStatement("SELECT * from tbr where transationId = ?");
//            preparedStatement2.setInt(1, transactionID);
//            ResultSet resultSet2 = preparedStatement2.executeQuery();

//            int bookId = 0;
//            if (resultSet2.next()) {
//                bookId = resultSet2.getInt("bookId");
//            }
//
//            if (bookId > 0) {
//                r2 = calculateFine(transactionID, bookId) > 0.0;
//            }

//            PreparedStatement preparedStatement3 = connection.prepareStatement("UPDATE book SET noOfBooks = noOfBooks + 1 WHERE "
//                    + "bookID = ?");
//            preparedStatement3.setInt(1, bookId);
//            preparedStatement3.executeUpdate();

        } catch (Exception e) {
            e.printStackTrace();
        }
        return r1 > 0 && rs1 > 0;
//        return r1 > 0.0 && r2;
    }

    private double calculateFine(int transactionId, int bookID) {
        try (Connection connection = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/lms", "root", pass)) {
            PreparedStatement preparedStatement = connection
                    .prepareStatement("SELECT issueDate, scheduleReturn FROM tbr where transactionId = ?");
            preparedStatement.setInt(1, transactionId);
            ResultSet resultSet = preparedStatement.executeQuery();

            java.sql.Date issueDate = resultSet.getDate("issueDate");
            java.sql.Date returnDate = resultSet.getDate("scheduledReturn");

            PreparedStatement diff = connection.prepareStatement("SELECT DATEDIFF(?, ?) AS diff");
            diff.setString(1, String.valueOf(issueDate));
            diff.setString(2, String.valueOf(returnDate));
            ResultSet days_rs = diff.executeQuery();

            int days = -1;
            if (days_rs.next()) {
                days = days_rs.getInt("diff");
            }

            PreparedStatement preparedStatement1 = connection.prepareStatement("SELECT bookType from book where " +
                    "bookId = ?");
            preparedStatement1.setInt(1, bookID);
            ResultSet rs = preparedStatement1.executeQuery();
            String bookType = null;
            if (rs.next()) {
                bookType = rs.getString("bookType");
            }

            if (days > 7)   {
                switch (Objects.requireNonNull(bookType)) {
                    case "Data Analytics":
                        return 5 * (days - 7);
                    case "Technology":
                        return 6 * (days - 7);
                    case "Management":
                        return 7 * (days - 7);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return 0;
    }
}
